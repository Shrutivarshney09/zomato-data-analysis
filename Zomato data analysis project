{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "14ai4fkNiZsQ6p9x85oI4eUsLXdxkRyrj",
      "authorship_tag": "ABX9TyOIyK14ATqsw0pDap6/GZ7T",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Shrutivarshney09/zomato-data-analysis/blob/main/Zomato%20data%20analysis%20project\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **zomato data analysis project**"
      ],
      "metadata": {
        "id": "Md1xeRoc1Rzh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **step 1- Importing libraries**"
      ],
      "metadata": {
        "id": "pMtGJQEa1tvF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "pandas is used for data manipulation and analysis.\n",
        "\n",
        "numpy is used for numerical.\n",
        "\n",
        "matplotlib.pyplot and seaborn are used for data visualization"
      ],
      "metadata": {
        "id": "yC1VTK4O2pJ1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "bOQp8oIs3P7I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **step 2- create the data frame**"
      ],
      "metadata": {
        "id": "upcDeb8-4yNx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe = pd.read_csv(\"/content/Zomato data .csv\")\n",
        "print(dataframe)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AXZ_LLI55Fut",
        "outputId": "11023f17-d5d8-4abd-c93b-97d852817742"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                      name online_order book_table   rate  votes  \\\n",
            "0                    Jalsa          Yes        Yes  4.1/5    775   \n",
            "1           Spice Elephant          Yes         No  4.1/5    787   \n",
            "2          San Churro Cafe          Yes         No  3.8/5    918   \n",
            "3    Addhuri Udupi Bhojana           No         No  3.7/5     88   \n",
            "4            Grand Village           No         No  3.8/5    166   \n",
            "..                     ...          ...        ...    ...    ...   \n",
            "143       Melting Melodies           No         No  3.3/5      0   \n",
            "144        New Indraprasta           No         No  3.3/5      0   \n",
            "145           Anna Kuteera          Yes         No  4.0/5    771   \n",
            "146                 Darbar           No         No  3.0/5     98   \n",
            "147          Vijayalakshmi          Yes         No  3.9/5     47   \n",
            "\n",
            "     approx_cost(for two people) listed_in(type)  \n",
            "0                            800          Buffet  \n",
            "1                            800          Buffet  \n",
            "2                            800          Buffet  \n",
            "3                            300          Buffet  \n",
            "4                            600          Buffet  \n",
            "..                           ...             ...  \n",
            "143                          100          Dining  \n",
            "144                          150          Dining  \n",
            "145                          450          Dining  \n",
            "146                          800          Dining  \n",
            "147                          200          Dining  \n",
            "\n",
            "[148 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 582
        },
        "id": "SjmXnqSa6Pzm",
        "outputId": "c36cffef-10af-42dd-ccb7-354a033e741b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      name online_order book_table   rate  votes  \\\n",
              "0                    Jalsa          Yes        Yes  4.1/5    775   \n",
              "1           Spice Elephant          Yes         No  4.1/5    787   \n",
              "2          San Churro Cafe          Yes         No  3.8/5    918   \n",
              "3    Addhuri Udupi Bhojana           No         No  3.7/5     88   \n",
              "4            Grand Village           No         No  3.8/5    166   \n",
              "..                     ...          ...        ...    ...    ...   \n",
              "143       Melting Melodies           No         No  3.3/5      0   \n",
              "144        New Indraprasta           No         No  3.3/5      0   \n",
              "145           Anna Kuteera          Yes         No  4.0/5    771   \n",
              "146                 Darbar           No         No  3.0/5     98   \n",
              "147          Vijayalakshmi          Yes         No  3.9/5     47   \n",
              "\n",
              "     approx_cost(for two people) listed_in(type)  \n",
              "0                            800          Buffet  \n",
              "1                            800          Buffet  \n",
              "2                            800          Buffet  \n",
              "3                            300          Buffet  \n",
              "4                            600          Buffet  \n",
              "..                           ...             ...  \n",
              "143                          100          Dining  \n",
              "144                          150          Dining  \n",
              "145                          450          Dining  \n",
              "146                          800          Dining  \n",
              "147                          200          Dining  \n",
              "\n",
              "[148 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b37ed11-25ff-48d6-80ec-a406625a6944\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1/5</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1/5</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8/5</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7/5</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8/5</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>143</th>\n",
              "      <td>Melting Melodies</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.3/5</td>\n",
              "      <td>0</td>\n",
              "      <td>100</td>\n",
              "      <td>Dining</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>144</th>\n",
              "      <td>New Indraprasta</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.3/5</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>Dining</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>Anna Kuteera</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.0/5</td>\n",
              "      <td>771</td>\n",
              "      <td>450</td>\n",
              "      <td>Dining</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>Darbar</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.0/5</td>\n",
              "      <td>98</td>\n",
              "      <td>800</td>\n",
              "      <td>Dining</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>Vijayalakshmi</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.9/5</td>\n",
              "      <td>47</td>\n",
              "      <td>200</td>\n",
              "      <td>Dining</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>148 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b37ed11-25ff-48d6-80ec-a406625a6944')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b37ed11-25ff-48d6-80ec-a406625a6944 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b37ed11-25ff-48d6-80ec-a406625a6944');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c959b631-d882-4365-a07f-2fc5887767bf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c959b631-d882-4365-a07f-2fc5887767bf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c959b631-d882-4365-a07f-2fc5887767bf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_24d1cb24-e4c3-4df4-8abd-e4f1a0721e08\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dataframe')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_24d1cb24-e4c3-4df4-8abd-e4f1a0721e08 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('dataframe');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"4.1/5\",\n          \"2.6/5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **convert the data type of coloumn - rate**"
      ],
      "metadata": {
        "id": "A1-Dik8C8ZHy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def handleRate(value):\n",
        "  value=str(value).split('/')\n",
        "  value=value[0];\n",
        "  return float(value)\n",
        "dataframe['rate']=dataframe['rate'].apply(handleRate)\n",
        "print(dataframe.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APLCr4YR8jeB",
        "outputId": "12fecd38-8383-434d-b9f2-d28dd5f05c5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                    name online_order book_table  rate  votes  \\\n",
            "0                  Jalsa          Yes        Yes   4.1    775   \n",
            "1         Spice Elephant          Yes         No   4.1    787   \n",
            "2        San Churro Cafe          Yes         No   3.8    918   \n",
            "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
            "4          Grand Village           No         No   3.8    166   \n",
            "\n",
            "   approx_cost(for two people) listed_in(type)  \n",
            "0                          800          Buffet  \n",
            "1                          800          Buffet  \n",
            "2                          800          Buffet  \n",
            "3                          300          Buffet  \n",
            "4                          600          Buffet  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M0WTuQRo7V7a",
        "outputId": "53c90a76-b5b7-4b88-b239-3531ea7b221a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 148 entries, 0 to 147\n",
            "Data columns (total 7 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   name                         148 non-null    object \n",
            " 1   online_order                 148 non-null    object \n",
            " 2   book_table                   148 non-null    object \n",
            " 3   rate                         148 non-null    float64\n",
            " 4   votes                        148 non-null    int64  \n",
            " 5   approx_cost(for two people)  148 non-null    int64  \n",
            " 6   listed_in(type)              148 non-null    object \n",
            "dtypes: float64(1), int64(2), object(4)\n",
            "memory usage: 8.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Type of resturant**"
      ],
      "metadata": {
        "id": "y7Xl9zop_mCO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 347
        },
        "id": "zTlX2xG96-HE",
        "outputId": "add6f639-3426-4224-f8c9-ccb61c121ec4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ca51e48-5b5c-4b32-8dc6-31d6c7c539dc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ca51e48-5b5c-4b32-8dc6-31d6c7c539dc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ca51e48-5b5c-4b32-8dc6-31d6c7c539dc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ca51e48-5b5c-4b32-8dc6-31d6c7c539dc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ed7a1d9d-7905-4673-a3f5-44636154fe61\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed7a1d9d-7905-4673-a3f5-44636154fe61')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ed7a1d9d-7905-4673-a3f5-44636154fe61 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=dataframe['listed_in(type)'])\n",
        "plt.xlabel(\"type of resturant\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "gEGSeS0h_7cH",
        "outputId": "35fb5415-3c4a-49f8-bf3a-fd2a1eda3bd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'type of resturant')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **conclusion-majority of the resturant falls in dinning category**"
      ],
      "metadata": {
        "id": "meHOaynLIJbJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "OZJcqH1HHrwJ",
        "outputId": "aa9b62fc-8803-4253-8be4-e1b7f4f1b2a5"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e538275-6e7a-4945-aeba-4329695f5e78\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e538275-6e7a-4945-aeba-4329695f5e78')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e538275-6e7a-4945-aeba-4329695f5e78 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e538275-6e7a-4945-aeba-4329695f5e78');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f65f08c-4665-43bc-9a21-d5a224bc58fe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f65f08c-4665-43bc-9a21-d5a224bc58fe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f65f08c-4665-43bc-9a21-d5a224bc58fe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "grouped_data = dataframe.groupby('listed_in(type)')['votes'].sum()\n",
        "result = pd.DataFrame({'votes': grouped_data})\n",
        "plt.plot(result, c=\"green\", marker=\"o\")\n",
        "plt.xlabel(\"Type of resturant\", c=\"red\", size=20)\n",
        "plt.ylabel(\"votes\", c=\"red\", size=20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "IBuiX7DvIpDJ",
        "outputId": "dab30dfd-63a3-4658-d462-a2b0fbbf14b6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'votes')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **conclusion-dinning resturant has recieved maximum votes**"
      ],
      "metadata": {
        "id": "raYnciYlLNWh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "AY0Pg2kBL1k0",
        "outputId": "45a33b13-b102-452f-d541-09cd05bf1be4"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4347ea5e-296a-4aa8-8eb4-6cd190d4603b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4347ea5e-296a-4aa8-8eb4-6cd190d4603b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4347ea5e-296a-4aa8-8eb4-6cd190d4603b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4347ea5e-296a-4aa8-8eb4-6cd190d4603b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-956eab96-b93c-46f4-a94d-7813d5b44b32\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-956eab96-b93c-46f4-a94d-7813d5b44b32')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-956eab96-b93c-46f4-a94d-7813d5b44b32 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(dataframe['rate'],bins =5)\n",
        "plt.title(\"rating distribution\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "ml_bsTYoLh00",
        "outputId": "cc0fd708-4781-4857-8402-441f99b1204a"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **conclusion-the majority resturants received rating from 3.5 to 4**"
      ],
      "metadata": {
        "id": "UfC7CkbBNezC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Average order spending by couples**"
      ],
      "metadata": {
        "id": "1_L93NNDOCwz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "IfD0PqHFNKA6",
        "outputId": "38798e56-68c3-4424-f13b-8ff58f5e256e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-33a13ca2-8793-416a-89b0-8bb5151d3329\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33a13ca2-8793-416a-89b0-8bb5151d3329')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-33a13ca2-8793-416a-89b0-8bb5151d3329 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-33a13ca2-8793-416a-89b0-8bb5151d3329');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ccb6c3de-64de-4641-82b5-b445952bbbee\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ccb6c3de-64de-4641-82b5-b445952bbbee')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ccb6c3de-64de-4641-82b5-b445952bbbee button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "couple_data=dataframe['approx_cost(for two people)']\n",
        "sns.countplot(x=couple_data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "lKoxpcaqOlJW",
        "outputId": "bb7650be-1279-4d69-b865-e21aba149d7f"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='approx_cost(for two people)', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **conclusion- the majority of couple prefer resturants with an approximate cost of 300 rupees**"
      ],
      "metadata": {
        "id": "90CYqY_5QdwF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **which mode receives maximum rating**"
      ],
      "metadata": {
        "id": "0g39s35nRHI9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dO6yvlv3SSBA",
        "outputId": "9220025f-01f1-4944-92fd-374338c71c58"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-51c0e0c1-911f-49e6-9241-7be23fedb57d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-51c0e0c1-911f-49e6-9241-7be23fedb57d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-51c0e0c1-911f-49e6-9241-7be23fedb57d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-51c0e0c1-911f-49e6-9241-7be23fedb57d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-124bf3bd-878b-4bdb-b066-b24760534600\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-124bf3bd-878b-4bdb-b066-b24760534600')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-124bf3bd-878b-4bdb-b066-b24760534600 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(6,6))\n",
        "sns.boxplot(x= 'online_order', y= 'rate', data = dataframe)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 559
        },
        "id": "QujwIL3HRn2W",
        "outputId": "37f11f6a-812f-42cc-eb3c-e1fa0e07ce2a"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='online_order', ylabel='rate'>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **conclusion-offline order received lower rating in comparison to online order**"
      ],
      "metadata": {
        "id": "sbPtqqchSwnY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataframe.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "M712eITLcQUO",
        "outputId": "ad5d6ad8-f60e-4a9a-848a-430a80617acc"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                    name online_order book_table  rate  votes  \\\n",
              "0                  Jalsa          Yes        Yes   4.1    775   \n",
              "1         Spice Elephant          Yes         No   4.1    787   \n",
              "2        San Churro Cafe          Yes         No   3.8    918   \n",
              "3  Addhuri Udupi Bhojana           No         No   3.7     88   \n",
              "4          Grand Village           No         No   3.8    166   \n",
              "\n",
              "   approx_cost(for two people) listed_in(type)  \n",
              "0                          800          Buffet  \n",
              "1                          800          Buffet  \n",
              "2                          800          Buffet  \n",
              "3                          300          Buffet  \n",
              "4                          600          Buffet  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-126657df-11d0-454d-b089-4059df21606e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>name</th>\n",
              "      <th>online_order</th>\n",
              "      <th>book_table</th>\n",
              "      <th>rate</th>\n",
              "      <th>votes</th>\n",
              "      <th>approx_cost(for two people)</th>\n",
              "      <th>listed_in(type)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Jalsa</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Yes</td>\n",
              "      <td>4.1</td>\n",
              "      <td>775</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Spice Elephant</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>4.1</td>\n",
              "      <td>787</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>San Churro Cafe</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>918</td>\n",
              "      <td>800</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Addhuri Udupi Bhojana</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.7</td>\n",
              "      <td>88</td>\n",
              "      <td>300</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Grand Village</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>3.8</td>\n",
              "      <td>166</td>\n",
              "      <td>600</td>\n",
              "      <td>Buffet</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-126657df-11d0-454d-b089-4059df21606e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-126657df-11d0-454d-b089-4059df21606e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-126657df-11d0-454d-b089-4059df21606e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-752545e0-874e-457e-9936-3ec5131c1279\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-752545e0-874e-457e-9936-3ec5131c1279')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-752545e0-874e-457e-9936-3ec5131c1279 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "dataframe",
              "summary": "{\n  \"name\": \"dataframe\",\n  \"rows\": 148,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          \"The Biryani Cafe\",\n          \"Melting Melodies\",\n          \"Cuppa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"online_order\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"book_table\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4022705140380333,\n        \"min\": 2.6,\n        \"max\": 4.6,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          4.1,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"votes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653,\n        \"min\": 0,\n        \"max\": 4884,\n        \"num_unique_values\": 90,\n        \"samples\": [\n          244,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"approx_cost(for two people)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 223,\n        \"min\": 100,\n        \"max\": 950,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          800,\n          300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"listed_in(type)\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Cafes\",\n          \"Dining\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pivot_table = dataframe.pivot_table(index='listed_in(type)', columns='online_order',  aggfunc='size', fill_value=0)\n",
        "sns.heatmap(pivot_table, annot=True, cmap=\"YlGnBu\", fmt='d')\n",
        "plt.title(\"heatmap\")\n",
        "plt.xlabel(\"online order\")\n",
        "plt.ylabel(\"listed In(Type)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "hklw2dYfZNFT",
        "outputId": "f3b056eb-ba75-48a1-9dcb-9f531027f3b7"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***CONCLUSION:Dining resturants primarily accept offline orders, whereas cafes primarily receive online orders. This suggests that clients prefer order in person at restaurants, but prefer online ordering at cafes. ***"
      ],
      "metadata": {
        "id": "At3PI6Locrp4"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "98-IybqmdzSW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}